{"version":3,"sources":["App.js","index.js"],"names":["padTime","time","toString","padStart","App","useState","timeLeft","setTimeLeft","isRunning","setIsRunning","intervalRef","useRef","resetTimer","clearInterval","current","minutes","Math","floor","seconds","useEffect","document","title","className","onClick","setInterval","prev","ReactDOM","render","StrictMode","getElementById"],"mappings":"yKAGMA,G,KAAU,SAACC,GACb,OAAOA,EAAKC,WAAWC,SAAS,EAAG,OAiExBC,MA9Df,WAAgB,IAAD,EAEqBC,mBAAS,KAF9B,mBAEJC,EAFI,KAEMC,EAFN,OAGuBF,oBAAS,GAHhC,mBAGJG,EAHI,KAGOC,EAHP,KAILC,EAAcC,iBAAO,MAsBrBC,EAAa,WACfL,EAAY,KACZM,cAAcH,EAAYI,SAC1BL,GAAa,GACbC,EAAYI,QAAU,MAGpBC,EAAUf,EAAQgB,KAAKC,MAAMX,EAAW,KACxCY,EAAUlB,EAAQM,EAAqB,GAAVS,GAMnC,OAJAI,qBAAU,WACNC,SAASC,MAAT,UAAoBN,EAApB,cAAiCG,KAClC,CAACH,EAASG,IAGT,yBAAKI,UAAU,OACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACX,8BAAOP,GACP,mCACA,8BAAOG,IAGX,yBAAKI,UAAU,WACVd,EACG,4BAAQe,QAhCV,WACc,OAAxBb,EAAYI,UAChBL,GAAa,GACbI,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,QA4BN,QACA,4BAAQS,QA9CT,WACa,OAAxBb,EAAYI,UAChBL,GAAa,GACbC,EAAYI,QAAUU,aAAY,WAC9BjB,GAAY,SAAAkB,GACR,OAAInB,GAAY,EAAUmB,EAAO,GAEjCb,IACO,QAEZ,QAoCa,SAEJ,4BAAQW,QAASX,GAAjB,aCvDpBc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASS,eAAe,U","file":"static/js/main.ee73f20e.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\n\nconst padTime = (time) => {\n    return time.toString().padStart(2, '0')\n}\n\nfunction App() {\n\n    const [timeLeft, setTimeLeft] = useState(15 * 60)\n    const [isRunning, setIsRunning] = useState(false)\n    const intervalRef = useRef(null)\n\n    const startTimer = () => {\n        if (intervalRef.current !== null) return\n        setIsRunning(true)\n        intervalRef.current = setInterval(() => {\n            setTimeLeft(prev => {\n                if (timeLeft >= 1) return prev - 1\n\n                resetTimer()\n                return 0\n            })\n        }, 1000)\n    }\n\n    const stopTimer = () => {\n        if (intervalRef.current === null) return\n        setIsRunning(false)\n        clearInterval(intervalRef.current)\n        intervalRef.current = null\n    }\n\n    const resetTimer = () => {\n        setTimeLeft(15 * 60)\n        clearInterval(intervalRef.current)\n        setIsRunning(false)\n        intervalRef.current = null\n    }\n\n    const minutes = padTime(Math.floor(timeLeft / 60))\n    const seconds = padTime(timeLeft - minutes * 60)\n\n    useEffect(() => {\n        document.title = `${minutes} : ${seconds}`\n    }, [minutes, seconds])\n\n    return (\n        <div className=\"app\">\n            <div className=\"main\">\n                <div className=\"timer\">\n                    <span>{minutes}</span>\n                    <span>:</span>\n                    <span>{seconds}</span>\n                </div>\n\n                <div className=\"buttons\">\n                    {isRunning ?\n                        <button onClick={stopTimer}>Stop</button> :\n                        <button onClick={startTimer}>Start</button>\n                    }\n                    <button onClick={resetTimer}>Reset</button>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}